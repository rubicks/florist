#!/bin/sh

# florist/origtar2deb

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly default_distribution="xenial"
readonly default_ros_distro="kinetic"
readonly default_upstream_treeish="HEAD"

log() { echo "${whatami}[$$]: $@" >&2; }
info() { log "INFO: $@"; }
warning() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]... ORIGTAR
Bloom, build, and package an orig tarball.

Options
    -h                 print this usage and return success
    -f                 force bloom (overwrite extant release repository)
    -D DISTRIBUTION    override distribution (default: ${default_distribution})
    -R ROS_DISTRO      override ros_distro (default: ${default_ros_distro})

Examples:

    \$ ./$(basename ${this}) rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ ./$(basename ${this}) -f rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ ./$(basename ${this}) -f -D xenial rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ ./$(basename ${this}) -f -D xenial -R kinetic rapidplan_0.1.2-222-g4a6d3cc.orig.tar

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >&2; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

# $1 : bare git repository
# $2 : destination directory
# rest : git clone args
safe_git_clone() {
    src="$1"
    dst="$2"
    shift 2
    if [ -d "${dst}" ]; then
        warning "exists: ${dst}"
    else
        mkdir -vp "${dst}"
    fi
    if git clone $@ "${src}" "${dst}"; then
        return 0
    fi
    warning "failure: git clone $@ ${src} ${dst}"
    if ! extant_remote="$(git -C ${dst} config --get remote.origin.url)"; then
        error "failure: git -C ${dst} config --get remote.origin.url"
        return 1
    fi
    if ! [ "${src}" = "${extant_remote}" ]; then
        error "bad remote: need ${src}, have ${extant_remote}"
        return 1
    fi
    if ! git -C "${dst}" fetch --verbose --all; then
        error "failure: git -C ${dst} fetch --verbose --all"
        return 1
    fi
    if ! git -C "${dst}" submodule update --init --recursive; then
        error "failure: git -C ${dst} submodule update --init --recursive"
        return 1
    fi
    warning "will use existing clone: ${dst}"
    return 0
}

is_good_origtar() {
    local regex='^[a-z0-9][a-z0-9.+-]+_[0-9]+([.][0-9]+){2}-[0-9]+-g[0-9a-f]{7,40}[.]orig[.]tar([.](gz|bz2|xz))?$'
    if ! basename "$1" | grep -Eq "${regex}"; then
        error "bad file name: $1"
        return 1
    fi
    if ! file -bz "$1" | grep -q '^POSIX tar archive'; then
        error "bad file type: $(file -bz "$1")"
        return 1
    fi
    return 0
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hfD:R:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        f) readonly force_bloom="true" ;;
        D) readonly distribution="${OPTARG}" ;;
        R) readonly ros_distro="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

######################
# VET ARGUMENT BEGIN #
######################

if ! [ 1 -eq "$#" ]; then
    die "bad args"
fi
if ! origtar="$(readlink -f "$1")"; then
    die "missing path: $1"
fi
if ! [ -f "${origtar}" ]; then
    die "missing file: ${origtar}"
fi
if ! is_good_origtar "${origtar}"; then
    die "bad origtar: ${origtar}"
fi
readonly origtar="${origtar}"

####################
# VET ARGUMENT END #
####################

#####################
# VET OPTIONS BEGIN #
#####################

# distribution
if [ -n "${distribution:-}" ]; then
    info "given distribution: ${distribution}"
else
    readonly distribution="${default_distribution}"
    warning "defaulting distribution: ${distribution}"
fi

# ros_distro
if [ -n "${ros_distro:-}" ]; then
    info "given ros_distro: ${ros_distro}"
else
    readonly ros_distro="${default_ros_distro}"
    warning "defaulting ros_distro: ${ros_distro}"
fi

###################
# VET OPTIONS END #
###################

# assumes `scrippies/git2origtar` creates a well-formed filename
readonly package_name="$(basename "${origtar%.orig.tar*}" | cut -d_ -f1)"
readonly real_version="$(basename "${origtar%.orig.tar*}" | cut -d_ -f2)"
readonly fake_version="$(echo "${real_version}" | cut -d- -f1)"
readonly release_bare="${PWD}/${package_name}_${real_version}-release.git"

readonly origtargz="${origtar%.orig.tar*}.orig.tar.gz"
case "${origtar}" in
    *.tar)
        decompress_cmd="cat" ;;
    *.tar.gz)
        decompress_cmd="gzip --no-name -cd" ;;
    *.tar.bz2)
        decompress_cmd="bzip2 -cd" ;;
    *.tar.xz)
        decompress_cmd="xz -cd" ;;
    *)
        die "bad file extension: ${origtar}" ;;
esac

if [ "true" = "${force_bloom:-false}" ] || ! [ -d "${release_bare}" ]; then
    eval "${decompress_cmd}" <"${origtar}" | gzip --no-name -c >"${origtargz}"
    rm -rf "${release_bare}"
    mkdir -vp "${release_bare}"
    info "$(git init --bare "${release_bare}")"

    # > The upstream repository is the repository where you do your development
    # > and host the source code of your package. This repository can be hosted
    # > anywhere (even locally) and can be a git, hg, or svn repository or the
    # > location of an archive (tar.gz only for now, but there are plans for
    # > tar.bz and zip).
    #
    # --- http://wiki.ros.org/bloom/Tutorials/FirstTimeRelease#Preparing_for_Release
    "${here}/tarball2bloom" \
        -C "${release_bare}" \
        -R "${ros_distro}" \
        -P "${package_name}" \
        -V "${fake_version}" \
        "${origtargz}"
else
    warning "skipping tarball2bloom"
fi

readonly branch_list="${release_bare%.git}.branch.list"
(
    cd "$(mktemp -d)"
    git clone "file://${release_bare}" .
    git branch -a
) >"${branch_list}"

# > [a package name] must only consist of alphanumerics and _ separators
#
# -- http://www.ros.org/reps/rep-0144.html#mandatory-rules
#
# ..._*BUT*_ catkin will happily build packages with hyphens, too.
sed -nri "s|^  remotes/origin/(debian/${ros_distro}/${distribution}/[[:alnum:]_-]+)$|\1|gp" "${branch_list}"
sort -uo "${branch_list}" "${branch_list}"

# uncomment this to avoid "*_example" subprojects
#sed -ri '/.*_examples$/d' "${branch_list}"

# create dependency list, topo sort, and reverse topo sort
(
    cd "$(mktemp -d)"
    tar -xf "${origtargz}"
    "${here}/rosdeps"
) >rosdeps.out

readonly release_dir="${release_bare%.git}.dir"

# `bloom2deb` creates a file-local apt repository with `Packages` and `Sources`
# files in the current working directory.
touch Packages Sources
while read package; do
    dpkg_name="$(echo "ros-${ros_distro}-${package}" | tr '_' '-')"
    if ! branch_name="$(grep -E "${package}\$" <"${branch_list}")"; then
        die "package missing branch: ${package}"
    fi
    sed -nr 's/^(Package|Version): (.*)$/\2/gp' Packages | xargs -L2 >packages.list
    sed -nr 's/^(Package|Version): (.*)$/\2/gp' Sources | xargs -L2 >sources.list
    if extant_package="$(grep "^${dpkg_name} ${real_version}$" packages.list)"; then
        info "extant package: ${extant_package}"
    fi
    if extant_source="$(grep "^${dpkg_name} ${real_version}$" sources.list)"; then
        info "extant source: ${extant_source}"
    fi
    if [ -n "${extant_package:-}" ] && [ -n "${extant_source:-}" ]; then
        warning "skipping bloom2deb: ${dpkg_name} ${real_version}"
        continue
    fi
    info "starting bloom2deb: ${dpkg_name} ${real_version}"

    # because bloom hates git-lfs or something
    rm -rf "${release_dir}"
    mkdir -vp "${release_dir}"
    git clone --branch "${branch_name}" "file://${release_bare}" "${release_dir}"

    # this is where we override the bloom-release version
    "${here}/bloom2deb" -C "${release_dir}" -V "${real_version}"
    info "SUCCESS: BUILT branch ${branch_name}, version ${real_version}"

    rm -rf "${release_dir}"
done <rosdeps.out

info "SUCCESS: PACKAGED ${origtar}"
info "real_version : ${real_version}"
info "fake_version : ${fake_version}"
info "release_bare : ${release_bare}"
info "ros_distro   : ${ros_distro}"
info "distribution : ${distribution}"

exit "$?"
