#!/bin/sh

# florist/bloom2deb

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${here}").$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
inform() { log "INFO: $@"; }
warn() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]... [-- [buildpackage option]...]
Build debian package artifacts from local bloomed RELEASE_DIR.

Options
    -h                print this usage and return success
    -C RELEASE_DIR    run as if started in RELEASE_DIR (default: \$PWD)
    -V NEW_VERSION    override the bloom-release version

Notes:

    RELEASE_DIR must be a valid git checkout directory and the current branch
    name must be of the form

        "debian/\${ROS_DISTRO}/\${DISTRIBUTION}/\${PACKAGE_NAME}"

    Examples:

        * debian/kinetic/xenial/ros_comm
        * debian/kinetic/xenial/sns_ik
        * debian/melodic/bionic/orocos_kdl

Example:

    \$ $(basename ${this}) -C ~/rapidplan-release -V 0.1.0-9-g8eb4b80 -- --source-option=-Dvcs-ref=0.1.0

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >&2; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

run_raw() {
    readonly oldpwd="${PWD}"
    readonly newdir="$(mktemp -u).$(basename "${release_dir}")"
    mkdir -vp "${newdir}"
    (
        cd "${newdir}"
        tar -cf- -C "${release_dir}" . | tar -xf-

        gbp dch \
            --verbose \
            --ignore-branch \
            --release \
            --new-version="${new_version}" \
            --since=HEAD \
            --spawn-editor=never \
            "automated build via $(basename "${this}")"

        # https://github.com/ros-infrastructure/ros_buildfarm/blob/master/ros_buildfarm/sourcedeb_job.py
        gbp buildpackage \
            --git-compression-level=9 \
            --git-compression=xz \
            --git-ignore-branch \
            --git-ignore-new \
            --git-upstream-branch="${release_branch}" \
            --git-upstream-tree="${release_branch}" \
            -j"$(nproc)" -us -uc --source-option='-i.*' ${buildpackage_opts}

        find .. -maxdepth 1 -type f -exec cp -v {} "${oldpwd}" \;
    )
}

run_dockerized() {
    readonly image_name="rubicks/ros-dpkg:${ros_distro}"
    if [ "true" = "${DOCKER_IMAGE_PULL:-false}" ]; then
        docker image pull "${image_name}"
    else
        warn "skipping: docker image pull ${image_name}"
    fi

    readonly workdir="$(mktemp -u).workdir"
    docker container run \
        --dns 8.8.4.4 \
        --dns 8.8.8.8 \
        --env BUILDPACKAGE_OPTS="${buildpackage_opts}" \
        --env DEBCONF_NONINTERACTIVE_SEEN=true \
        --env DEBIAN_FRONTEND=noninteractive \
        --env DISTRIBUTION="${distribution}" \
        --env DOCKER_HOST_GID="$(id -g)" \
        --env DOCKER_HOST_UID="$(id -u)" \
        --env HERE="${here}" \
        --env RELEASE_DIR="${release_dir}" \
        --env ROS_DISTRO="${ros_distro}" \
        --env THIS="${this}" \
        --env NEW_VERSION="${new_version}" \
        --interactive \
        --mount type=bind,source="${PWD}",target="${workdir}" \
        --mount type=bind,source="${here}",target="${here}",readonly \
        --mount type=bind,source="${release_dir}",target="${release_dir}",readonly \
        --rm \
        --workdir="${workdir}" \
        "${image_name}" \
        sh <<'EOF'
set -euvx

# From any/all debian package files within the current working directory,
# create a temporary local apt repository

dpkg-scanpackages --multiversion . >Packages
dpkg-scansources . >Sources
cat >/etc/apt/sources.list.d/workdir.list <<WORKDIR_LIST
deb     [trusted=yes] file://${PWD} ./
deb-src [trusted=yes] file://${PWD} ./
WORKDIR_LIST

# Work around the following APT issue by using "Acquire::GzipIndexes=false":
#
# Err:3 file:/tmp/tmp.nKz7UlX66y.workdir ./ Packages Could not open file
# /var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages - open (13:
# Permission denied)
#
# E: Failed to fetch
# store:/var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages Could
# not open file
# /var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages - open (13:
# Permission denied)
apt-get -y -o Acquire::GzipIndexes=false update

mk-build-deps \
    --install \
    --remove \
    --tool "apt-get -y --no-install-recommends -o Debug::pkgProblemResolver=true" \
    "${RELEASE_DIR}/debian/control"

groupadd -g "${DOCKER_HOST_GID}" luser
useradd -d $(mktemp -dt luser.home.XXXXXX) -u "${DOCKER_HOST_UID}" -g "${DOCKER_HOST_GID}" luser
chown -cR ${DOCKER_HOST_UID}:${DOCKER_HOST_GID} $(getent passwd luser | cut -d: -f6) ${PWD}
su luser -c "${THIS} -r -C ${RELEASE_DIR} -V ${NEW_VERSION} -- ${BUILDPACKAGE_OPTS}"
EOF
}

# http://www.etalabs.net/sh_tricks.html
save() {
    for i; do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"; done
    echo " "
}

#############################
# ######################### #
# # REAL WORK STARTS HERE # #
# ######################### #
#############################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hrC:V:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        r) readonly run_raw="true" ;;
        C)
            [ -d "$(readlink -e "${OPTARG}")" ] || die "missing directory: ${OPTARG}"
            readonly release_dir="$(readlink -e "${OPTARG}")"
            ;;
        V) readonly new_version="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"
readonly buildpackage_opts="$(save "$@")"

if [ -n "${release_dir:-}" ]; then
    inform "release_dir: ${release_dir}"
else
    readonly release_dir="${PWD}"
    warn "defaulting release_dir: ${release_dir}"
fi

if ! git -C "${release_dir}" status; then
    die "failure: git -C ${release_dir} status"
fi

if ! release_branch="$(git -C ${release_dir} symbolic-ref -q --short HEAD)"; then
    die "failure: git -C ${release_dir} symbolic-ref -q --short HEAD"
fi

if ! [ -n "${release_branch}" ]; then
    die "empty release_branch"
fi

if ! echo "${release_branch}" | grep -E '^debian(/[[:alnum:]_-]+){3}$'; then
    die "bad release_branch: ${release_branch}"
fi

readonly ros_distro="$(echo "${release_branch}" | cut -d/ -f2)"
readonly distribution="$(echo "${release_branch}" | cut -d/ -f3)"
readonly package_name="$(echo "${release_branch}" | cut -d/ -f4)"

if [ -n "${new_version:-}" ]; then
    inform "new_version: ${new_version}"
else
    readonly new_version="$(dpkg-parsechangelog -l ${release_dir}/debian/changelog --show-field Version)}"
    warn "defaulting new_version: ${new_version}"
fi

if [ "true" = "${run_raw:-false}" ]; then
    run_raw
else
    run_dockerized
fi

exit "$?"
