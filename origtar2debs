#!/bin/sh

# florist/origtar2debs

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly default_distribution="xenial"
readonly default_ros_distro="kinetic"
readonly default_upstream_treeish="HEAD"

log() { echo "${whatami}[$$]: $@" >&2; }
info() { log "INFO: $@"; }
warning() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

usage() {
    cat <<EOF
Usage: $0 [OPTION]... ORIGTAR
Bloom, build, and package an orig tarball.

Options
    -h                 print this usage and return success
    -D DISTRIBUTION    override distribution (default: ${default_distribution})
    -R ROS_DISTRO      override ros_distro (default: ${default_ros_distro})

Examples:

    \$ $0 rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ $0 -f rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ $0 -f -D xenial rapidplan_0.1.2-222-g4a6d3cc.orig.tar

    \$ $0 -f -D xenial -R kinetic rapidplan_0.1.2-222-g4a6d3cc.orig.tar

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    local status="$?"
    rm -rf "${tmpdir}" || true
    return "${status}"
}

# $1 : bare git repository
# $2 : destination directory
# rest : git clone args
safe_git_clone() {
    src="$1"
    dst="$2"
    shift 2
    if [ -d "${dst}" ]; then
        warning "exists: ${dst}"
    else
        mkdir -vp "${dst}"
    fi
    if git clone $@ "${src}" "${dst}"; then
        return 0
    fi
    warning "failure: git clone $@ ${src} ${dst}"
    if ! extant_remote="$(git -C ${dst} config --get remote.origin.url)"; then
        error "failure: git -C ${dst} config --get remote.origin.url"
        return 1
    fi
    if ! [ "${src}" = "${extant_remote}" ]; then
        error "bad remote: need ${src}, have ${extant_remote}"
        return 1
    fi
    if ! git -C "${dst}" fetch --verbose --all; then
        error "failure: git -C ${dst} fetch --verbose --all"
        return 1
    fi
    if ! git -C "${dst}" submodule update --init --recursive; then
        error "failure: git -C ${dst} submodule update --init --recursive"
        return 1
    fi
    warning "will use existing clone: ${dst}"
    return 0
}

is_good_origtar() {
    local regex='^[a-z0-9][a-z0-9.+-]+_[0-9]+([.][0-9]+){2}-[0-9]+-g[0-9a-f]{7,40}[.]orig[.]tar([.](gz|bz2|xz))?$'
    if ! basename "$1" | grep -Eq "${regex}"; then
        error "bad file name: $1"
        return 1
    fi
    if ! file -bz "$1" | grep -q '^POSIX tar archive'; then
        error "bad file type: $(file -bz "$1")"
        return 1
    fi
    return 0
}


# $1 : ros_distro
infer_distribution() {
    case "${1:-}" in
        kinetic)
            echo "xenial"
            return 0
            ;;
        melodic)
            echo "bionic"
            return 0
            ;;
        "")
            error "undefined ros_distro"
            return 1
            ;;
        *)
            error "unknown ros_distro: $1"
            return 1
            ;;
    esac
    return 1
}

# $1 : distribution
infer_ros_distro() {
    case "${1:-}" in
        xenial)
            echo "kinetic"
            return 0
            ;;
        bionic)
            echo "melodic"
            return 0
            ;;
        "")
            error "undefined distribution"
            return 1
            ;;
        *)
            error "unknown distribution: $1"
            return 1
            ;;
    esac
    return 1
}

# take nothing and detect the OS distribution; print distribution on success;
# print nothing on failure
detect_distribution() {
    if ! [ -f /etc/os-release ]; then
        error "missing file: /etc/os-release"
        return 1
    fi
    . /etc/os-release
    if ! [ -n "${UBUNTU_CODENAME:-}" ]; then
        error "undefined UBUNTU_CODENAME"
        return 1
    fi
    echo "${UBUNTU_CODENAME}"
    return 0
}

# take nothing and detect the installed ros_distro; print ros_distro on
# success; print nothing on failure
detect_ros_distro() {
    if ! [ -d /opt/ros ]; then
        error "missing directory: /opt/ros"
        return 1
    fi
    local ros_distro_list="$(mktemp -t ros.distro.list.XXXXXX)"
    find /opt/ros -maxdepth 1 -mindepth 1 -type d -exec basename {} \; >"${ros_distro_list}"
    case "$(wc -l <"${ros_distro_list}")" in
        0)
            error "missing ROS installation"
            return 1
            ;;
        1)
            cat "${ros_distro_list}"
            return 0
            ;;
        *)
            error "multiple ROS installations"
            return 1
            ;;
    esac
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hfD:R:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        D) readonly distribution="${OPTARG}" ;;
        R) readonly ros_distro="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

######################
# VET ARGUMENT BEGIN #
######################

if ! [ 1 -eq "$#" ]; then
    die "bad args"
fi
if ! origtar="$(readlink -f "$1")"; then
    die "missing path: $1"
fi
if ! [ -f "${origtar}" ]; then
    die "missing file: ${origtar}"
fi
if ! is_good_origtar "${origtar}"; then
    die "bad origtar: ${origtar}"
fi
readonly origtar="${origtar}"

####################
# VET ARGUMENT END #
####################

#####################
# VET OPTIONS BEGIN #
#####################

# distribution
if [ -n "${distribution:-}" ]; then
    info "distribution: ${distribution}"
else
    if distribution="$(infer_distribution "${ros_distro:-}")"; then
        warning "inferred distribution for ${ros_distro}: ${distribution}"
    else
        if distribution="$(detect_distribution)"; then
            warning "detected distribution: ${distribution}"
        else
            die "failed to assign distribution"
        fi
    fi
    readonly distribution="${distribution}"
fi

# ros_distro
if [ -n "${ros_distro:-}" ]; then
    info "ros_distro: ${ros_distro}"
else
    if ros_distro="$(infer_ros_distro "${distribution:-}")"; then
        warning "inferred ros_distro for ${distribution}: ${ros_distro}"
    else
        if ros_distro="$(detect_ros_distro)"; then
            warning "detected ros_distro: ${ros_distro}"
        else
            die "failed to assign ros_distro"
        fi
    fi
    readonly ros_distro="${ros_distro}"
fi

###################
# VET OPTIONS END #
###################

readonly release_bare="${origtar%.orig.tar*}.git"
info "$(mkdir -vp "${release_bare}")"
info "$(git -C "${release_bare}" init --bare)"

"${here}/origtar2bloom" \
    -C "${release_bare}" \
    -R "${ros_distro}" \
    "${origtar}"

"${here}/bloom2debs" \
    -C "${release_bare}" \
    -D "${distribution}" \
    -R "${ros_distro}"

exit "$?"
