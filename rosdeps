#!/bin/sh

# florist/rosdeps

set -eu

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${here}").$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
info() { log "INFO: $@"; }
warning() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]...
Enumerate ros packages and print dependencies.

Options
    -h            print this usage and return success
    -C WORKDIR    run as if started in WORKDIR (default: \$PWD)

Examples:

    \$ ./$(basename ${this})

    \$ ./$(basename ${this}) -C ~/code/rapidplan

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >/dev/null 2>&1; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

run_raw() {
    # enumerate package.xml files
    readonly package_xml_list="$(mktemp -t package.xml.list.XXXXXX)"
    find "${workdir}" -type f -name 'package.xml' >"${package_xml_list}"
    sort -uo "${package_xml_list}" "${package_xml_list}"

    # enumerate package names
    readonly package_list="$(mktemp -t package.list.XXXXXX)"
    xargs xpath -q -e '/package/name/text()' <"${package_xml_list}" >"${package_list}"
    sort -uo "${package_list}" "${package_list}"

    # discover dependencies, construct dependency list
    readonly dependency_list="$(mktemp -t dependency.list.XXXXXX)"
    while read package_xml; do
        this_pkg="$(xpath -q -e '/package/name/text()' "${package_xml}")"
        this_deps="$(mktemp -t "${this_pkg}.deps.XXXXXX")"
        # from the package.xml, dump all dependencies
        xpath -q \
            -e '/package' \
            -e 'build_depend|buildtool_depend|depend|doc_depend|exec_depend|test_depend' \
            -e 'text()' \
            "${package_xml}" >"${this_deps}"
        sed -ri "s|^[[:space:]]+||g;s|[[:space:]]+$||g" "${this_deps}"
        sort -uo "${this_deps}" "${this_deps}"
        comm -12 "${this_deps}" "${package_list}" \
            | xargs -I {} echo "${this_pkg} {}" >>"${dependency_list}"
    done <"${package_xml_list}"

    readonly dependency_list_tsort="$(mktemp -t dependency_list_tsort.XXXXXX)"
    tsort "${dependency_list}" >"${dependency_list_tsort}"

    # info "dependency_list_tsort: ${dependency_list_tsort}"
    # while read line; do info "  ${line}"; done <"${dependency_list_tsort}"
    # info "package_list: ${package_list}"
    # while read line; do info "  ${line}"; done <"${package_list}"
    readonly result="$(mktemp -t result.XXXXXX)"
    (
        # For each package that IS NOT an intra-catkin-ws dependency and HAS NO
        # intra-catkin-ws dependencies, it can be built first:
        grep -vFf "${dependency_list_tsort}" "${package_list}" || true

        # The set of remaining packages (each of which IS an intra-catkin-ws
        # dependency and/or HAS intra-catkin-ws dependencies) can be built
        # next, in reverse topologically-sorted order:
        tac "${dependency_list_tsort}"
    ) >"${result}"
    cat "${result}"
}

run_dockerized() {
    readonly image_name="registry.gitlab.com/realtime-neil/bloomer"
    if [ "true" = "${DOCKER_IMAGE_PULL:-false}" ] \
        || ! docker image inspect "${image_name}" >/dev/null 2>&1; then
        docker image pull "${image_name}"
    else
        warning "skipping: docker image pull ${image_name}"
    fi
    docker image inspect "${image_name}"

    docker container run \
        --dns 8.8.4.4 \
        --dns 8.8.8.8 \
        --env WORKDIR="${workdir}" \
        --env THIS="${this}" \
        --interactive \
        --mount type=bind,source="${workdir}",target="${workdir}",readonly \
        --mount type=bind,source="${this}",target="${this}",readonly \
        --rm \
        --workdir="${workdir}" \
        "${image_name}" \
        sh <<'EOF'
set -eu
nice "${THIS}" -r -C "${WORKDIR}"
EOF
}

#############################
# ######################### #
# # REAL WORK STARTS HERE # #
# ######################### #
#############################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hrC:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        r) readonly run_raw="true" ;;
        C)
            if ! workdir="$(readlink -f "${OPTARG}")"; then
                die "missing path: ${OPTARG}"
            fi
            if ! [ -d "${workdir}" ]; then
                die "missing directory: ${workdir}"
            fi
            readonly workdir="${workdir}"
            ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

if [ -n "${workdir:-}" ]; then
    info "workdir: ${workdir}"
else
    readonly workdir="${PWD}"
    warning "defaulting workdir: ${workdir}"
fi

if [ "true" = "${run_raw:-false}" ]; then
    run_raw
else
    run_dockerized
fi

exit "$?"
