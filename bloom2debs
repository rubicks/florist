#!/bin/sh

# florist/bloom2debs

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

log() { echo "${whatami}[$$]: $@" >&2; }
error() { log "ERROR: $@"; }
warning() { log "WARNING: $@"; }
info() { log "INFO: $@"; }

usage() {
    cat <<EOF
Usage: $0 [OPTION]... [CATKIN_PKG]...
Build debian package artifacts from a local "release".

Options
    -h                 print this usage and return success
    -l                 list catkin packages in build order
    -U                 unsafe, sacrifice isolation to go faster
    -C RELEASE_BARE    run as if started in RELEASE_BARE (default: \$PWD)
    -D DISTRIBUTION    override distribution (default: inferred from RELEASE_BARE)
    -R ROS_DISTRO      override ros_distro (default: inferred from RELEASE_BARE)
    -V NEW_VERSION     override the bloom-release version (default: inferred from RELEASE_BARE)

Notes:

    RELEASE_BARE must be a valid git work tree directory and must contain
    branches of the form

        "debian/\${ROS_DISTRO}/\${DISTRIBUTION}/\${DEBIAN_PKG}"

    Examples:

        * debian/kinetic/xenial/ros_comm
        * debian/kinetic/xenial/sns_ik
        * debian/melodic/bionic/orocos_kdl

    Debian artifacts will be produced in $PWD

Examples:

    \$ $0 -C rapidplan_1.1.0-237-ge3abac7.git

    \$ $0 -U -C rapidplan_1.1.0-237-ge3abac7.git

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >&2; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

# $1 : release_bare path (assumed canonical)
#
# from given release_bare, enumerate "debian" branches; for good enumeration,
# print it and return success; otherwise print nothing and return failure.
debian_branch_list() {
    local result="$(mktemp -t branch_list.XXXXXX)"
    git -C "$1" branch -a >"${result}"
    sed -nri "s|^  (debian/[[:lower:]]+/[[:lower:]]+/[[:alnum:]_-]+)$|\1|gp" "${result}"
    sort -uo "${result}" "${result}"
    cat <"${result}"
}

# $1 : release_bare
# $2 : catkin_pkg
build_catkin_pkg() {
    local issue_net="$(tr -dc '[:alnum:]' </etc/issue.net | tr '[:upper:]' '[:lower:]')"
    local release_branch="debian/${ros_distro}/${distribution}/$2"
    local release_worktree="$(mktemp -d "$(basename "$1" .git).dir.$2.XXXXXX")"
    (
        # This a subtle point: we're changing into a temporary directory that
        # is created WITHIN the current working directory. This causes the
        # Debian package artifacts to be generated within the current working
        # directory. This is by design --- subsequent calls to this function
        # must be able to find the Debian artifacts being generated in the
        # current call.
        cd "${release_worktree}"

        # create a fresh clone for every single package build because bloom
        # hates git-lfs or something
        git clone -b "${release_branch}" "file://$1" .

        sudo mk-build-deps \
            --install \
            --remove \
            --tool "apt-get -y --no-install-recommends -o Debug::pkgProblemResolver=true" \
            debian/control

        gbp dch \
            --verbose \
            --ignore-branch \
            --release \
            --new-version="${new_version}-${issue_net}" \
            --since=HEAD \
            --spawn-editor=never \
            "automated build via $(basename "${this}")"

        # Why is it so hard to get a parallel build out of cmake? Here are some
        # things that don't work:
        #
        #export DH_OPTIONS="--parallel"
        #export DEB_BUILD_OPTIONS="parallel=$(nproc)"
        #export MAKEFLAGS="--jobs=$((1 + $(nproc) >> 1)) --max-load=$(nproc)"
        #
        # Here are some things people are saying about this:
        #
        # https://bugs.launchpad.net/ubuntu/+source/debhelper/+bug/1193077
        # https://www.debian.org/doc/debian-policy/ch-source.html#s-debianrules-options
        # https://dyn.manpages.debian.org/stretch/debhelper/debhelper.7.en.html
        # https://dyn.manpages.debian.org/stretch/dpkg-dev/dpkg-buildpackage.1.en.html
        #
        # Here's the issue and pull request I created:
        #
        # * https://github.com/ros-infrastructure/bloom/issues/546
        # * https://github.com/ros-infrastructure/bloom/pull/547
        #
        # Here's a nasty hack that does the trick:
        sed -ri 's|^(\tdh [$][@] [-]v --buildsystem=cmake)$|\1 --parallel|' debian/rules

        # There is something up with the Xenial debhelper. It uses gcc and g++
        # even though cc and c++ are pointing to clang and clang++
        sed -ri '/^export DH_VERBOSE=1$/aexport CXX=$(shell sh -c "command -v c++")' debian/rules
        sed -ri '/^export DH_VERBOSE=1$/aexport CC=$(shell sh -c "command -v cc")' debian/rules

        # https://github.com/ros-infrastructure/ros_buildfarm/blob/master/ros_buildfarm/sourcedeb_job.py
        gbp buildpackage \
            --git-compression-level=9 \
            --git-compression=xz \
            --git-ignore-branch \
            --git-ignore-new \
            --git-upstream-branch="${release_branch}" \
            --git-upstream-tree="${release_branch}" \
            -j"$((7 + $(nproc) >> 3))" -us -uc --source-option='-i.*'
    )
    # Now, we're back in the current working directory, where the generated
    # Debian artifacts landed. Delete the git worktree and refresh the index
    # files so that subsequent calls can find the Debian artifacts just built
    # by the current call.
    rm -rf "${release_worktree}"
}

# $1 : name
# $2 : version
# $3 : kind
find_kind() {
    local apcama="$(mktemp -t "apt-cache-madison_$1.XXXXXX")"
    apt-cache madison "$1" >"${apcama}"
    sed -ri 's,^[[:space:]]+,,g;s,[[:space:]]+$,,g;s,[[:space:]]+, ,g' "${apcama}"
    sed -nri "/^$1 [|] $2 [|] .* $3$/p" "${apcama}"
    sort -uo "${apcama}" "${apcama}"
    local result="$(tail -n 1 <"${apcama}")"
    if ! [ -n "${result}" ]; then
        return 1
    fi
    echo "${result}"
    return 0
}
find_pkg() { find_kind "$1" "$2" 'Packages'; }
find_src() { find_kind "$1" "$2" 'Sources'; }

run_raw() {
    env | sort
    local issue_net="$(tr -dc '[:alnum:]' </etc/issue.net | tr '[:upper:]' '[:lower:]')"
    local dpkg_name=""
    local found_pkg=""
    local found_src=""
    dpkg-scanpackages --multiversion . >"${PWD}/Packages"
    dpkg-scansources . >"${PWD}/Sources"
    for catkin_pkg in $@; do
        dpkg_name="$(echo "ros-${ros_distro}-${catkin_pkg}" | tr '_' '-')"
        if found_pkg="$(find_pkg "${dpkg_name}" "${new_version}-${issue_net}")"; then
            info "found_pkg: ${found_pkg}"
        fi
        if found_src="$(find_src "${dpkg_name}" "${new_version}-${issue_net}")"; then
            info "found_src: ${found_src}"
        fi
        if [ -n "${found_pkg:-}" ] && [ -n "${found_src:-}" ]; then
            warning "skipping: ${catkin_pkg}"
            continue
        fi
        build_catkin_pkg "${release_bare}" "${catkin_pkg}"
        dpkg-scanpackages --multiversion . >"${PWD}/Packages"
        dpkg-scansources . >"${PWD}/Sources"
    done
}

# http://www.etalabs.net/sh_tricks.html
save_args() {
    for i; do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/"; done
    echo " "
}

run_dockerized() {
    local saved_args="$(save_args $@)"
    local image_name="registry.gitlab.com/realtime-robotics/ros-dpkg:${ros_distro}"
    if [ "true" = "${DOCKER_IMAGE_PULL:-false}" ] \
        || ! docker image inspect "${image_name}" >/dev/null 2>&1; then
        docker image pull "${image_name}" >&2
    else
        warning "skipping: docker image pull ${image_name}"
    fi
    docker image inspect "${image_name}" >&2

    local workdir="$(mktemp -ut workdir.XXXXXX)"
    local host_memory_k="$(grep -Eom1 '[0-9]+' /proc/meminfo)"
    # https://docs.docker.com/config/containers/resource_constraints/
    docker container run \
        --cpus "$((7 + $(nproc) >> 3))" \
        --env CONFIGURE_APT_OPTS="${CONFIGURE_APT_OPTS:-}" \
        --env DEBCONF_NONINTERACTIVE_SEEN=true \
        --env DEBIAN_FRONTEND=noninteractive \
        --env DISTRIBUTION="${distribution}" \
        --env DOCKER_HOST_GID="$(id -g)" \
        --env DOCKER_HOST_UID="$(id -u)" \
        --env HERE="${here}" \
        --env NEW_VERSION="${new_version}" \
        --env RELEASE_BARE="${release_bare}" \
        --env ROS_DISTRO="${ros_distro}" \
        --env SAVED_ARGS="${saved_args}" \
        --env THIS="${this}" \
        --interactive \
        --memory "$((${host_memory_k} >> 1))k" \
        --memory-swap "${host_memory_k}k" \
        --memory-swappiness 100 \
        --mount type=bind,readonly,source="${here}",target="${here}" \
        --mount type=bind,readonly,source="${release_bare}",target="${release_bare}" \
        --mount type=bind,source="${PWD}",target="${workdir}" \
        --rm \
        --workdir="${workdir}" \
        "${image_name}" sh <<'EOF'
set -euvx

# proactive protection against a bad proxy
#
# * https://askubuntu.com/questions/679233/failed-to-fetch-hash-sum-mismatch-tried-rm-apt-list-but-didnt-work
# * https://serverfault.com/questions/722893/debian-mirror-hash-sum-mismatch
# * https://gist.github.com/trastle/5722089
find /var/lib/apt/lists -type f -print -delete
cat >/etc/apt/apt.conf.d/99fixbadproxy <<FIXBADPROXY
Acquire::http::Pipeline-Depth "0";
Acquire::http::No-Cache=True;
Acquire::BrokenProxy=true;
FIXBADPROXY

${HERE}/scrippies/configure-apt ${CONFIGURE_APT_OPTS} ${DISTRIBUTION}

# Create a apt sources list file pointing to the current working
# directory. Rely on the luser to populate it with Debian package artifacts
# and generate the index files 'Packages' and 'Sources'.
cat >/etc/apt/sources.list.d/workdir.list <<WORKDIR_LIST
deb     [trusted=yes] file://${PWD} ./
deb-src [trusted=yes] file://${PWD} ./
WORKDIR_LIST

groupadd -g "${DOCKER_HOST_GID}" luser
useradd \
    -m \
    -u "${DOCKER_HOST_UID}" \
    -g "${DOCKER_HOST_GID}" \
    -s "$(command -v sh)" \
    luser

nice -n19 su luser <<'SU_LUSER'
set -euvx
dpkg-scanpackages --multiversion . >${PWD}/Packages
dpkg-scansources . >${PWD}/Sources
SU_LUSER

# use apt config option "Acquire::GzipIndexes=false" to work around the
# following issue:
#
# Err:3 file:/tmp/tmp.nKz7UlX66y.workdir ./ Packages Could not open file
# /var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages - open (13:
# Permission denied)
#
# E: Failed to fetch
# store:/var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages Could
# not open file
# /var/lib/apt/lists/partial/_tmp_tmp.nKz7UlX66y.workdir_._Packages - open (13:
# Permission denied)
apt-get -y -o Acquire::GzipIndexes=false update

apt-get -y --no-install-recommends install sudo
cat >/etc/sudoers.d/luser-mk-build-deps <<LUSER_MK_BUILD_DEPS
luser $(hostname) = (root) NOPASSWD: $(command -v mk-build-deps)
LUSER_MK_BUILD_DEPS

# It's really hard to extract gcc from linux. The following effectively "works"
# in the sense that we...
#
# * "hold" `gcc*` and `g++*` Debian packages to prevent `mk-build-deps
# --install` from changing them incidentally (or intentionally)
#
# * overwrite executable binaries of the form `/usr/bin/gcc*` and
# `/usr/bin/g++*` with symlinks to `/usr/bin/cc` and `/usr/bin/c++`,
# respectively
#
# * https://clang.debian.net/ , "Configuration of the chroot" section
#
# * https://salsa.debian.org/lucas/collab-qa-tools/blob/master/modes/clang8
if ! info "Leaving gcc alone. For now."; then
    dpkg --get-selections \
        | sed -nr 's/^((gcc|g[+][+]).*)install$/\1hold/gp' \
        | dpkg --set-selections
    find /usr/bin -type f -perm /111 -regextype posix-extended \
         -regex "/usr/bin/gcc(-[[:digit:].]+)?" \
         -exec ln -vnsrf $(command -v cc) {} \;
    find /usr/bin -type f -perm /111 -regextype posix-extended \
         -regex "/usr/bin/g[+][+](-[[:digit:].]+)?" \
         -exec ln -vnsrf $(command -v c++) {} \;
fi

# from pcl_ros, remove all references to vtk
pclros_config_cmake="/opt/ros/${ROS_DISTRO}/share/pcl_ros/cmake/pcl_rosConfig.cmake"
if [ -f "${pclros_config_cmake}" ]; then
    sed -r \
        -i.backup \
        -e 's,;/usr/include/vtk[[:alnum:].-]+,,g' \
        -e 's,;/usr/lib(/x86_64-linux-gnu)?/libvtk[[:alnum:].-]+,,g' \
        "${pclros_config_cmake}"
    ! diff "${pclros_config_cmake}.backup" "${pclros_config_cmake}"
fi

nice -n19 su luser <<'SU_LUSER'
set -euvx
eval "set -- ${SAVED_ARGS}"
unset SAVED_ARGS
${THIS} -U -C ${RELEASE_BARE} -D ${DISTRIBUTION} -R ${ROS_DISTRO} -V ${NEW_VERSION} $@
SU_LUSER

EOF
}

# https://stackoverflow.com/questions/23513045/how-to-check-if-a-process-is-running-inside-docker-container
# https://stackoverflow.com/questions/20010199/how-to-determine-if-a-process-runs-inside-lxc-docker
is_in_container() { grep -q 'lxc\|docker' /proc/1/cgroup; }

run() {
    if ! is_in_container; then
        run_dockerized $@
    else
        run_raw $@
    fi
}

# $1 : release_bare path to be vetted
#
# for good vetting, print result release_bare canonical path and return
# success; otherwise print nothing and return failure
vet_release_bare() {
    local result=""
    if ! result="$(readlink -f "$1")"; then
        error "bad path: $1"
        return 1
    fi
    if ! [ -d "${result}" ]; then
        error "bad directory: ${result}"
        return 1
    fi
    if ! [ "." = "$(git -C "${result}" rev-parse --git-dir)" ]; then
        error "missing git dir: ${result}"
        return 1
    fi
    if ! [ "true" = "$(git -C "${result}" rev-parse --is-bare-repository)" ]; then
        error "not a bare git repository: ${result}"
        return 1
    fi
    if ! [ "false" = "$(git -C "${result}" rev-parse --is-inside-work-tree)" ]; then
        error "is inside git work tree: ${result}"
        return 1
    fi
    echo "${result}"
    return 0
}

get_single_unique() {
    sort -uo "$1" "$1"
    if ! [ 1 -eq "$(wc -l <"$1")" ]; then
        error "$1 has $(wc -l <"$1") lines"
        return 1
    fi
    xargs <"$1"
}

# $1 : release_bare path (assumed canonical)
#
# infer distribution from given release_bare; for good inference, print
# distribution and return success; otherwise, print nothing and return failure
infer_distribution() {
    local branch_list="$(mktemp -t branch_list.XXXXXX)"
    debian_branch_list "$1" >"${branch_list}"
    local distribution_list="$(mktemp -t distribution_list.XXXXXX)"
    cut -d/ -f3 <"${branch_list}" >"${distribution_list}"
    get_single_unique "${distribution_list}"
}

# $1 : release_bare path (assumed canonical)
#
# infer ros_distro from given release_bare; for good inference, print
# ros_distro and return success; otherwise, print nothing and return failure
infer_ros_distro() {
    local branch_list="$(mktemp -t branch_list.XXXXXX)"
    debian_branch_list "$1" >"${branch_list}"
    local ros_distro_list="$(mktemp -t ros_distro_list.XXXXXX)"
    cut -d/ -f2 <"${branch_list}" >"${ros_distro_list}"
    get_single_unique "${ros_distro_list}"
}

# $1 : release_bare canonical path
infer_new_version() {
    basename "$1" \
        | grep -Eo '[[:digit:]]+([.][[:digit:]]+){2}-[[:digit:]]+-g[[:xdigit:]]{7,40}'
}

# from release_bare, clone out the 'upstream' branch and enumerate all catkin
# packages in _topologically-sorted_ (least dependent to most dependent) order.
get_catkin_pkg_list() {
    if ! is_in_container; then
        local image_name="registry.gitlab.com/realtime-robotics/ros-dpkg:${ros_distro}"
        docker container run \
            --env DEBCONF_NONINTERACTIVE_SEEN=true \
            --env DEBIAN_FRONTEND=noninteractive \
            --env DISTRIBUTION="${distribution}" \
            --env NEW_VERSION="${new_version}" \
            --env RELEASE_BARE="${release_bare}" \
            --env ROS_DISTRO="${ros_distro}" \
            --env THIS="${this}" \
            --interactive \
            --mount type=bind,readonly,source="${release_bare}",target="${release_bare}" \
            --mount type=bind,readonly,source="${this}",target="${this}" \
            --rm \
            --workdir="$(mktemp -ut workdir.XXXXXX)" \
            "${image_name}" sh <<'EOF'
set -euvx
${THIS} -l -C ${RELEASE_BARE} -D ${DISTRIBUTION} -R ${ROS_DISTRO} -V ${NEW_VERSION}
EOF
        return "$?"
    fi
    local result="$(mktemp -t catkin_pkg_list.XXXXXX)"
    local release_worktree="$(mktemp -dt "$(basename "${release_bare}" .git).dir.XXXXXX")"
    git clone -b upstream "file://${release_bare}" "${release_worktree}"
    catkin build --dry-run --workspace "${release_worktree}" >"${result}"
    sed -ri \
        -e '1,/^Packages to be built:$/d' \
        -e '/^Total packages: [[:digit:]]+$/,$d' \
        "${result}"
    sed -ri 's|^- ([[:alnum:]_-]+).*$|\1|g' "${result}"
    cat <"${result}"
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hlUC:D:R:V:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        l) readonly requested_list="true" ;;
        U) readonly requested_unsafe="true" ;;
        C)
            if ! release_bare="$(vet_release_bare "${OPTARG}")"; then
                die "bad release_bare: ${OPTARG}"
            fi
            readonly release_bare="${release_bare}"
            ;;
        D) readonly distribution="${OPTARG}" ;;
        R) readonly ros_distro="${OPTARG}" ;;
        V) readonly new_version="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

# release_bare
if [ -n "${release_bare:-}" ]; then
    info "given release_bare: ${release_bare}"
else
    if ! release_bare="$(vet_release_bare "${PWD}")"; then
        die "bad release_bare: ${PWD}"
    fi
    readonly release_bare="${release_bare}"
    warning "defaulting release_bare: ${release_bare}"
fi

# distribution
if [ -n "${distribution:-}" ]; then
    info "distribution: ${distribution}"
else
    if ! distribution="$(infer_distribution "${release_bare}")"; then
        die "FAILURE: infer_distribution ${release_bare}"
    fi
    readonly distribution="${distribution}"
    warning "inferred distribution: ${distribution}"
fi

# ros_distro
if [ -n "${ros_distro:-}" ]; then
    info "ros_distro: ${ros_distro}"
else
    if ! ros_distro="$(infer_ros_distro "${release_bare}")"; then
        die "FAILURE: infer_ros_distro ${release_bare}"
    fi
    readonly ros_distro="${ros_distro}"
    warning "inferred ros_distro: ${ros_distro}"
fi

# new_version
if [ -n "${new_version:-}" ]; then
    info "new_version: ${new_version}"
else
    if ! new_version="$(infer_new_version "${release_bare}")"; then
        die "FAILURE: infer_new_version ${release_bare}"
    fi
    readonly new_version="${new_version}"
    warning "inferred new_version: ${new_version}"
fi

if [ "true" = "${requested_list:-false}" ]; then
    get_catkin_pkg_list
    exit "$?"
fi

if [ 0 -eq "$#" ]; then
    warning "no catkin_pkg arguments given"
    warning "will enumerate and build everything"
    readonly catkin_pkg_list="$(mktemp -t catkin_pkg_list.XXXXXX)"
    get_catkin_pkg_list >"${catkin_pkg_list}"
    eval "set -- $(xargs <"${catkin_pkg_list}")"
fi

if [ "true" = "${requested_unsafe:-false}" ]; then
    warning "requested unsafe operation"
    run $@
    exit "$?"
fi

for catkin_pkg in $@; do
    run "${catkin_pkg}"
done

exit "$?"
