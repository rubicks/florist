#!/bin/sh

# florist/git2deb

set -euvx

readonly this="$(readlink -f "$0")"
readonly here="$(dirname "${this}")"
readonly whatami="$(basename "${this}")"
readonly tmpdir="$(mktemp -dt "${whatami}.XXXXXX")"

readonly default_distribution="xenial"
readonly default_ros_distro="kinetic"
readonly default_upstream_treeish="HEAD"

log() { echo "${whatami}[$$]: $@" >&2; }
info() { log "INFO: $@"; }
warning() { log "WARNING: $@"; }
error() { log "ERROR: $@"; }

usage() {
    cat <<EOF
Usage: $(basename ${this}) [OPTION]...
Bloom, build, and package a git checkout.

Options
    -h                 print this usage and return success
    -f                 force bloom (overwrite extant release repository)
    -C WORKDIR         run as if started in workdir (default: \$PWD)
    -D DISTRIBUTION    override distribution (default: ${default_distribution})
    -R ROS_DISTRO      override ros_distro (default: ${default_ros_distro})

Examples:

    \$ ./$(basename ${this}) ~/code/rapidplan

    \$ ./$(basename ${this}) -f ~/code/rapidplan

    \$ ./$(basename ${this}) -f -D xenial ~/code/rapidplan

    \$ ./$(basename ${this}) -f -D xenial -R kinetic ~/code/rapidplan

EOF
}

die() {
    error "$@"
    usage >&2
    exit 1
}

cleanup() {
    status="$?"
    rm -rf "${tmpdir}"
    if command -v docker >&2; then
        docker system prune --force --filter until=6h >&2 || true
    fi
    return "${status}"
}

# $1 : bare git repository
# $2 : destination directory
# rest : git clone args
safe_git_clone() {
    src="$1"
    dst="$2"
    shift 2
    if [ -d "${dst}" ]; then
        warning "exists: ${dst}"
    else
        mkdir -vp "${dst}"
    fi
    if git clone $@ "${src}" "${dst}"; then
        return 0
    fi
    warning "failure: git clone $@ ${src} ${dst}"
    if ! extant_remote="$(git -C ${dst} config --get remote.origin.url)"; then
        error "failure: git -C ${dst} config --get remote.origin.url"
        return 1
    fi
    if ! [ "${src}" = "${extant_remote}" ]; then
        error "bad remote: need ${src}, have ${extant_remote}"
        return 1
    fi
    if ! git -C "${dst}" fetch --verbose --all; then
        error "failure: git -C ${dst} fetch --verbose --all"
        return 1
    fi
    if ! git -C "${dst}" submodule update --init --recursive; then
        error "failure: git -C ${dst} submodule update --init --recursive"
        return 1
    fi
    warning "will use existing clone: ${dst}"
    return 0
}

################################################################################

trap cleanup EXIT
export TMPDIR="${tmpdir}"
export LC_ALL=C

while getopts ":hfC:D:R:" opt; do
    case "${opt}" in
        h)
            usage
            exit "$?"
            ;;
        f) readonly force_bloom="true" ;;
        C)
            if ! workdir="$(readlink -f "${OPTARG}")"; then
                die "missing path: ${OPTARG}"
            fi
            if ! [ -d "${workdir}" ]; then
                die "missing directory: ${workdir}"
            fi
            readonly workdir="${OPTARG}"
            ;;
        D) readonly distribution="${OPTARG}" ;;
        R) readonly ros_distro="${OPTARG}" ;;
        :) die "Missing argument: -${OPTARG}" ;;
        \?) die "Invalid option: -${OPTARG}" ;;
    esac
done
shift "$((${OPTIND} - 1))"

#####################
# VET OPTIONS BEGIN #
#####################

# workdir
if [ -n "${workdir:-}" ]; then
    info "workdir: ${workdir}"
else
    readonly workdir="${PWD}"
    warning "defaulting workdir: ${workdir}"
fi

# distribution
if [ -n "${distribution:-}" ]; then
    info "given distribution: ${distribution}"
else
    readonly distribution="${default_distribution}"
    warning "defaulting distribution: ${distribution}"
fi

# ros_distro
if [ -n "${ros_distro:-}" ]; then
    info "given ros_distro: ${ros_distro}"
else
    readonly ros_distro="${default_ros_distro}"
    warning "defaulting ros_distro: ${ros_distro}"
fi

###################
# VET OPTIONS END #
###################

# create *.orig.tar
read origtar <<EOF
$("${here}/scrippies/git2origtar" -C "${workdir}")
EOF
if ! [ -n "${origtar}" ]; then
    die "FAILURE: ${here}/scrippies/git2origtar -C ${workdir}"
fi
if ! [ -f "${origtar}" ]; then
    die "missing file: ${origtar}"
fi

if [ "true" = "${force_bloom:-false}" ]; then
    opts="-f"
else
    opts=""
fi

"${here}/origtar2deb" ${opts} -D "${distribution}" -R "${ros_distro}" "${origtar}"

exit "$?"
